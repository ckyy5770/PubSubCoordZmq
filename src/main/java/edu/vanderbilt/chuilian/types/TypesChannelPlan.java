// automatically generated by the FlatBuffers compiler, do not modify

package edu.vanderbilt.chuilian.types;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TypesChannelPlan extends Table {
    public static TypesChannelPlan getRootAsTypesChannelPlan(ByteBuffer _bb) {
        return getRootAsTypesChannelPlan(_bb, new TypesChannelPlan());
    }

    public static TypesChannelPlan getRootAsTypesChannelPlan(ByteBuffer _bb, TypesChannelPlan obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public TypesChannelPlan __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String topic() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer topicAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public String strategy() {
        int o = __offset(6);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer strategyAsByteBuffer() {
        return __vector_as_bytebuffer(6, 1);
    }

    public String availableBroker(int j) {
        int o = __offset(8);
        return o != 0 ? __string(__vector(o) + j * 4) : null;
    }

    public int availableBrokerLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }

    public static int createTypesChannelPlan(FlatBufferBuilder builder,
                                             int topicOffset,
                                             int strategyOffset,
                                             int availableBrokerOffset) {
        builder.startObject(3);
        TypesChannelPlan.addAvailableBroker(builder, availableBrokerOffset);
        TypesChannelPlan.addStrategy(builder, strategyOffset);
        TypesChannelPlan.addTopic(builder, topicOffset);
        return TypesChannelPlan.endTypesChannelPlan(builder);
    }

    public static void startTypesChannelPlan(FlatBufferBuilder builder) {
        builder.startObject(3);
    }

    public static void addTopic(FlatBufferBuilder builder, int topicOffset) {
        builder.addOffset(0, topicOffset, 0);
    }

    public static void addStrategy(FlatBufferBuilder builder, int strategyOffset) {
        builder.addOffset(1, strategyOffset, 0);
    }

    public static void addAvailableBroker(FlatBufferBuilder builder, int availableBrokerOffset) {
        builder.addOffset(2, availableBrokerOffset, 0);
    }

    public static int createAvailableBrokerVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startAvailableBrokerVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endTypesChannelPlan(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }
}

