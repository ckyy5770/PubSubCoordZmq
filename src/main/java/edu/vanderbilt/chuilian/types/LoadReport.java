// automatically generated by the FlatBuffers compiler, do not modify

package edu.vanderbilt.chuilian.types;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class LoadReport extends Table {
  public static LoadReport getRootAsLoadReport(ByteBuffer _bb) {
    return getRootAsLoadReport(_bb, new LoadReport());
  }

  public static LoadReport getRootAsLoadReport(ByteBuffer _bb, LoadReport obj) {
    _bb.order(ByteOrder.LITTLE_ENDIAN);
    return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
  }

  public void __init(int _i, ByteBuffer _bb) {
    bb_pos = _i;
    bb = _bb;
  }

  public LoadReport __assign(int _i, ByteBuffer _bb) {
    __init(_i, _bb);
    return this;
  }

  public String brokerID() {
    int o = __offset(4);
    return o != 0 ? __string(o + bb_pos) : null;
  }

  public ByteBuffer brokerIDAsByteBuffer() {
    return __vector_as_bytebuffer(4, 1);
  }

  public long timeTag() {
    int o = __offset(6);
    return o != 0 ? bb.getLong(o + bb_pos) : 0L;
  }

  public double loadRatio() {
    int o = __offset(8);
    return o != 0 ? bb.getDouble(o + bb_pos) : 0.0;
  }

  public ReportEntry channelReports(int j) {
    return channelReports(new ReportEntry(), j);
  }

  public ReportEntry channelReports(ReportEntry obj, int j) {
    int o = __offset(10);
    return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
  }

  public int channelReportsLength() {
    int o = __offset(10);
    return o != 0 ? __vector_len(o) : 0;
  }

  public static int createLoadReport(FlatBufferBuilder builder,
                                     int brokerIDOffset,
                                     long timeTag,
                                     double loadRatio,
                                     int channelReportsOffset) {
    builder.startObject(4);
    LoadReport.addLoadRatio(builder, loadRatio);
    LoadReport.addTimeTag(builder, timeTag);
    LoadReport.addChannelReports(builder, channelReportsOffset);
    LoadReport.addBrokerID(builder, brokerIDOffset);
    return LoadReport.endLoadReport(builder);
  }

  public static void startLoadReport(FlatBufferBuilder builder) {
    builder.startObject(4);
  }

  public static void addBrokerID(FlatBufferBuilder builder, int brokerIDOffset) {
    builder.addOffset(0, brokerIDOffset, 0);
  }

  public static void addTimeTag(FlatBufferBuilder builder, long timeTag) {
    builder.addLong(1, timeTag, 0L);
  }

  public static void addLoadRatio(FlatBufferBuilder builder, double loadRatio) {
    builder.addDouble(2, loadRatio, 0.0);
  }

  public static void addChannelReports(FlatBufferBuilder builder, int channelReportsOffset) {
    builder.addOffset(3, channelReportsOffset, 0);
  }

  public static int createChannelReportsVector(FlatBufferBuilder builder, int[] data) {
    builder.startVector(4, data.length, 4);
    for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
    return builder.endVector();
  }

  public static void startChannelReportsVector(FlatBufferBuilder builder, int numElems) {
    builder.startVector(4, numElems, 4);
  }
  public static int endLoadReport(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  public static void finishLoadReportBuffer(FlatBufferBuilder builder, int offset) {
    builder.finish(offset);
  }
}

